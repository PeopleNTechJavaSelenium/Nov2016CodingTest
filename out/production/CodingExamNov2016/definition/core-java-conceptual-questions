Please answer the below core-java Questions:


What jdk contains or composed of and define each components?
The Java Developer's Kit contains a variety of tools and Java development information. Following is a list of the main components of the JDK:

- The Runtime Interpreter : is the core runtime module for the Java system.The runtime interpreter provides the support to run Java executable programs
  in compiled, bytecode format.
- The Compiler :The Java compiler (javac) is used to compile Java source code files into executable Java bytecode classes. In Java, source code files
  have the extension .java.

The Java compiler takes files with this extension and generates executable class files with the .class extension.

- The compiler : creates one class file for each class defined in a source file.
  This means that many times a single Java source code file will compile into multiple executable class files.
  When this happens, it means that the source file contains multiple class definitions.
- The Applet Viewer : The applet viewer is a tool that serves as a minimal test bed for final release Java applets.
  You can use the applet viewer to test your programs instead of having to wait for HotJava to support the final release of Java.
- The Debugger : is a simple command-line debugger for Java classes. It is a demonstration of the Java Platform Debugger Architecture that provides
  inspection and debugging of a local or remote Java Virtual Machine.
- The Class File Disassembler :The javap command disassembles one or more class files. Its output depends on the options used.
  If no options are used, javap prints out the package, protected, and public fields and methods of the classes passed to it. javap prints its output to
  stdout.
- The Header and Stub File Generator : The Java header and stub file generator (javah) is used to generate C header and source files for implementing Java
  methods in C. The files generated can be used to access member variables of an object from C code.
  The header and stub file generator accomplishes this by generating a C structure whose layout matches that of the corresponding Java class.
- The Documentation Generator : The Java documentation generator (javadoc) is a useful tool for generating API documentation directly from Java source code.
  The documentation generator parses through Java source files and generates HTML pages based on the declarations and comments.
- Applet Demos : The JDK comes with a variety of interesting Java demo applets, all of which include complete source code. Following is a list of the
  demo Java applets that come with the JDK:
  Animator, ArcTest, BarChart, Blink, BouncingHeads, CardTest, DitherTest, DrawTest, Fractal, GraphicsTest, GraphLayout, ImageMap, ImageTest, JumpingBox,
  MoleculeViewer, NervousText, ScrollingImages, SimpleGraph, SpreadSheet, TicTacToe, TumblingDuke, UnderConstruction, WireFrame.
- API Source Code : The final component of the Java Developers Kit is the source code for the Java API. That's right-the JDK comes with the complete
  source code for all the classes that make up the Java API.
  Sun isn't concerned with keeping the internals of Java top secret. They followed the lead of the UNIX world and decided to make Java as available and
  readily understood as possible. Besides, the real value of Java is not the specific code that makes it work, it's the idea behind it.
  The API source code is automatically installed to your hard drive when you decompress the JDK, but it remains in compressed form.
  The assumption is that not everyone is concerned about how the internals of Java are implemented, so why waste the space. However, it is sometimes
  useful to be able to look under the hood to see how something works. Because Java is no exception, the API source code comes compressed in a file
  called src.zip, located in the java directory created on your hard drive during installation of the JDK.
  All the classes that make up the Java API are included in this file.

What is IDE?
An integrated development environment (IDE) is a software suite that consolidates the basic tools developers need to write and test software.
Typically, an IDE contains a code editor, a compiler or interpreter and a debugger that the developer accesses through a single graphical user interface (GUI).
An IDE may be a standalone application, or it may be included as part of one or more existing and compatible applications.

What are the IDEs available in the market to support java?
 NetBeans, Eclipse, IntelliJ , JDeveloper, Android Studio, DrJava, MyEclipse, JEdit ...etc.

Explain the entire java life cycle.
A Java program is written using either a Text Editor like Textpad or an IDE like Eclipse and is saved as a .java file. (Program.java)
- The .java file is then compiled using Java compiler and a .class file is obtained from it. (Program.class)
- The .class file is now portable and can be used to run this Java program in any platform.
- Class file (Program.class) is interpreted by the JVM installed on a particular platform. JVM is part of the JRE software.
We can use any text editor to create the high-level Java text file. This file is saved as a .java file on the disk. We then compile this text file using
the Java compiler, which result in a .class file being created on the disk. The .class file contains the bytecodes.
The file is then loaded into memory by the class loader. The bytecode verifier confirms that the bytecodes are valid and not hostile.
Finally, the JVM reads the bytecodes in memory and translates them into machine code.

what is class?
A class is the blueprint from which individual objects are created which defines its properties and behaviors.

What is object?
An object is an instance of a class. An object stores its state in fields (variables in some programming languages) and exposes its behavior through
methods (functions in some programming languages).

What is the entry point of an application?
An application entry point identifies a resource that is an access point to an application. Application entry points are used to control users' access
to different versions of an application that is deployed on a platform.
They are also used to create an application context to monitor the resource usage for applications and to identify an application being run.
The main method is the entry point of a Java application.

Why main is static?
When the JVM makes a call to the main method, there is no object that exists for the class being called. Therefore it has to have static method to allow
invocation from class.

What is the difference between an Interface and Abstract class?
- Abstract class can have abstract and non-abstract methods. Interface can have only abstract methods.
- Abstract class doesn't support multiple inheritance. Interface supports multiple inheritance.
- Abstract class can have final, non-final, static and non-static variables. Interface has only static and final variables.
- Abstract class can have static methods, main method and constructor. Interface can't have static methods, main method or constructor.
- Abstract class can provide the implementation of interface. Interface can't provide the implementation of abstract class.
- The abstract keyword is used to declare abstract class.The interface keyword is used to declare interface.

Can you make an Object from an Interface and Abstract class ? if not how do you use it ?
No, we cannot make an Object from an Interface or Abstract class.
We can create the object to interface or abstract class indirectly by providing implementation in the form of anonymous inner type.

what is Access Specifier?
An access specifier is a defining code element that can determine which elements of a program are allowed to access a specific variable or other piece
of data.
In java, Access Specifiers regulate access to classes, fields and methods.
These Specifiers determine whether a field or method in a class, can be used or invoked by another method in another class or sub-class.
Access Specifiers can be used to restrict access. They are an integral part of object-oriented programming.
The following are the types Of Access Specifiers :
public, private, protected, default (no specifier).

What is OOP ? Define each feature of java OOP.
Object-Oriented Programming is a methodology or paradigm to design a program using classes and objects.
It simplifies the software development and maintenance by providing some concepts:
- Object
- Class
- Inheritance
- Polymorphism
- Abstraction
- Encapsulation

Define each feature of java OOP:
- Inheritance: When one object acquires all the properties and behaviours of parent object, It provides code reusability.
  It is used to achieve runtime polymorphism.
- Abstraction: Hiding internal details and showing functionality.
- Encapsulation: Binding (or wrapping) code and data together into a single unit.
- Polymorphism: is the ability of an object to take on many forms.
  The most common use of polymorphism in OOP occurs when a parent class reference is used to refer to a child class object.
  We use method overloading and method overriding to achieve polymorphism.

What is API? Name list of API that you have used so far.
Java application programming interface (API) is a list of all classes that are part of the Java development kit (JDK). It includes all Java packages,
classes, and interfaces, along with their methods, fields, and constructors. These prewritten classes provide a tremendous amount of functionality to
a programmer.
We have used Eclipse and Intellij.

Does java support multiple inheritance?
Java doesn't support multiple inheritance to avoid ambiguity state. Multiple inheritance carries with it several special cases that must be handled.
This adds overhead to both the compiler and the run-time system.
The designers of Java considered multiple inheritance to be too complex, and not in line with the goal of keeping Java simple.

What is method overloading and when it happens?

Method Overloading is a feature that allows a class to have two or more methods having same name, if their argument lists are different.
Overleading occurs when two or more methods shares same name and fulfill at least one of the following condition.
1) Have different number of arguments.
2) Have same number of arguments but their types are different.
3) Have both different numbers of arguments with a difference in their types.

What is method overriding and when it happens?
Method overriding is a language feature that allows a subclass or child class to provide a specific implementation
of a method that is already provided by one of its superclasses or parent classes.
Overriding is used to provide specific implementation of a method that is already provided by its super class and also used for runtime polymorphism.

Explain exceptions in java and how to handle it.
An exception is an event, which occurs during the execution of a program, that disrupts the normal flow of the program's instructions.

When an error occurs within a method, the method creates an object and hands it off to the runtime system. The object, called an exception object,
contains information about the error, including its type and the state of the program when the error occurred.
Creating an exception object and handing it to the runtime system is called throwing an exception.

After a method throws an exception, the runtime system attempts to find something to handle it. The set of possible "somethings" to handle the exception
is the ordered list of methods that had been called to get to the method where the error occurred. The list of methods is known as the call stack.

The runtime system searches the call stack for a method that contains a block of code that can handle the exception. This block of code is called an
exception handler. The search begins with the method in which the error occurred and proceeds through the call stack in the reverse order in
which the methods were called. When an appropriate handler is found, the runtime system passes the exception to the handler.
An exception handler is considered appropriate if the type of the exception object thrown matches the type that can be handled by the handler.

The exception handler chosen is said to catch the exception. If the runtime system exhaustively searches all the methods on the call stack without finding
an appropriate exception handler, as shown in the next figure, the runtime system (and, consequently, the program) terminates.

What is static keyword in java? How it has been used in variables and methods ?
The static keyword in java is used for memory management mainly. We can apply java static keyword with variables, methods, blocks and nested class.
The static keyword belongs to the class than instance of the class.
A static method is a method which belongs to the class and not to the object. It can access only static data.
Static in variables is used to initialize them. These variables will be initialized first, before the initialization of any instance variables.

What is final and how it has been used variables and methods?
The final keyword in java is used to restrict the user. It can be used in variables and methods as follow:
If you make any variable as final, you cannot change the value of final variable(It will be constant).
If you make any method as final, you cannot override it.

What is final, finally and finalize?
Final is a keyword used to apply restrictions on class, method and variable.
Final class can't be inherited, final method can't be overridden and final variable value can't be changed.
Finally is a block used to place important code, it will be executed whether exception is handled or not.
Finalize is a method used to perform clean up processing just before object is garbage collected.

What is a constructor ?
A constructor in Java is a block of code similar to a method that’s called when an instance of an object is created.
Here are the key differences between a constructor and a method:
- A constructor doesn’t have a return type.
- The name of the constructor must be the same as the name of the class.
- Unlike methods, constructors are not considered members of a class.
- A constructor is called automatically when a new instance of an object is created.

What is "this" keyword in java ?
"this" is a reference variable that refers to the current object.
- this keyword can be used to refer current class instance variable.
- this() can be used to invoke current class constructor.
- this keyword can be used to invoke current class method (implicitly)
- this can be passed as an argument in the method call.
- this can be passed as argument in the constructor call.
- this keyword can also be used to return the current class instance.

What is "super" keyword in java?
The super keyword in java is a reference variable that is used to refer immediate parent class object.
- super is used to refer immediate parent class instance variable.
- super() is used to invoke immediate parent class constructor.
- super is used to invoke immediate parent class method.

What is JVM stand for ?
JVM stands for Java Virtual Machine.

What version of java are you using?
I'm using the version 1.8.0_111 of java.

What is JAR stand for ?
JAR stands for Java Archive.

What is compile time and run time?
Compile time means to check the errors of program before running it in the command prompt
Runtime means when you run/execute the compiled program after coding it.

What is heap?
The heap is the runtime data area from which memory for all class instances and arrays is allocated. The heap is created on virtual machine start-up.
Heap storage for objects is reclaimed by an automatic storage management system.

How java manage it's memory?
Java objects reside in an area called the heap. The heap is created when the JVM starts up and may increase or decreasein size while the application runs.
When the heap becomes full, garbage is collected. During the garbage collection objects that are no longer used are cleared, thus making space for new
objects. The JVM uses more memory than just the heap. For example Java methods, thread stacks and native handles are allocated in memory separate from
the heap, as well as JVM internal data structures. The heap is sometimes divided into two areas (or generations) called the nursery (or young space) and
the old space. The nursery is a part of the heap reserved for allocation of new objects. When the nursery becomes full, garbage is collected by running
a special young collection, where all objects that have lived long enough in the nursery are promoted (moved) to the old space, thus freeing up the
nursery for more object allocation. When the old space becomes full garbage is collected there, a process called an old collection. The reasoning behind
a nursery is that most objects are temporary and short lived. A young collection is designed to be swift at finding newly allocated objects that are
still alive and moving them away from the nursery. Typically, a young collection frees a given amount of memory much faster than an old collection or a
garbage collection of a single-generational heap (a heap without a nursery).

What is the difference between String, StringBuffer and StringBuilder?
- String is immutable  ( once created can not be changed )object  . The object created as a String is stored in the  Constant String Pool.
  Every immutable object in Java is thread safe ,that implies String is also thread safe . String can not be used by two threads simultaneously.
  String  once assigned can not be changed.
- StringBuffer is mutable means one can change the value of the object. The object created through StringBuffer is stored in the heap.
  StringBuffer has the same methods as the StringBuilder, but each method in StringBuffer is synchronized that is StringBuffer is thread safe.
- StringBuilder  is same as the StringBuffer , that is it stores the object in heap and it can also be modified. The main difference between the
  StringBuffer and StringBuilder is that StringBuilder is also not thread safe. StringBuilder is fast as it is not thread safe.