Please answer the below Data Structure Questions:

why do we need data structure?
- to arrange and process the data in the memory for efficient storage, access and processing. Data structure is a particular way of storing and organizing information in a computer so that it can be retrieved and used most productively

List out the areas in which data structures are applied extensively?
-Compiler Design, Operating System, Database Management System, Statistical analysis package, Numerical Analysis, Graphics, Artificial Intelligence, Simulation

what is an Array?
-An array is a container object that holds a fixed number of values of a single type. The length of an array is established when the array is created

what is the difference between the Array and ArrayList?
-arrayList size can be constatly modified , how ever Arrays have fixed size. Array can contain both primitive and refrence data types. how ever Arraylist cant hold primitive.

what is LinkedList?
-linear data structure and each elements of it is an object

what is queue?
-A queue is a FIFO sequence. that is used in collection prior to processing

what is stack?
-Container for objects that are inserted and removed.

what is FIFO and LIFO?
-First-In-First-Out
-Last-In-First-Out

what is the order of complexity?
-it is a way to describe the complexity of the algorithm based on time and space

what is the best case to search an element from an array?
-when the elements you need is at index 0 of the array

what is the worst case to search an element from an array?
-worst case is when it is at the last index of the array, due to time and performance reduction.

what is tree in data structure?
-Tree ,simulates a hierarchical tree structure, with a root value and subtrees of children with a parent node, represented as a set of linked nodes.

what is graph in data structure?
-Graph is part of the data structure which is an object consisting of a vertex set and an edge.

what is the difference between the HashTable and HashMap?
-Hashmap is not synchronizable but HashTable is.
Hashmap allows 1 null key but Hashtable doesnt allow any.
Hashmap is faster for proccessing than HashTable.

What are the major data structures used in the following areas :
RDBMS =columns,tables,rows, array,
Network data model = Graphs structure.
Hierarchical data model.= Tress structures.

How HashMap works in java?
-by user passing key and value objects
What is ArrayIndexOutOfBoundsException in java? When it occurs?
- it happens when the illegal index was used to access that array.
What are the different ways of copying an array into another array?
-best way is to use API , or through algorithm with the help of loops.

What is difference between an array and a linked list?
-The size of the array is fixed.
LinkedLIst has dynamic size. and also makes the manipulation(Insertion/deletetion) easier
Random access is not allowed in LinkedList but it can be done in an array.
Array has a better performance

What is DFS and BFS?
-Deapth first search and Breadth first search. Both can be used in algorithm to traverse the tree and graph data structures.
What is Recursion?
-Recursion is a basic programming technique you can use in Java, in which a method calls itself to solve some problem

What is Big-(O)-notation?
 -Big O notation is used in Computer Science to describe the performance or complexity of an algorithm

Outlined different kind of sorting algorithm with time complexity?
      SORTYPE       TIME COMPLEXITY
-Quick sort --->     Ω(n log(n))  best          0(n^2) worst
mergeSort------>    Ω(n log(n))   best          0(n log(n)) worst
timesort ------>     Ω((n) best                 0(n log(n)) worst
HeapSort------>    Ω(n log(n))   best          0(n log(n)) worst

Draw a table with time complexity in which it will summarize all the data structure feature's advantages and disadvantages.
  a)In terms of Accessing element.
  b)In terms of Inserting element.
  c)In terms of Searching element.
  d)In terms of Removing element.

		           Access	Search 	Insert	Delete

Hash Table	        N/A	     Θ(1)	 Θ(1)	 Θ(1)

Array		       Θ(1)	 Θ(n)	 Θ(n)	 Θ(n)

Linked List	       Θ(n)	 Θ(n)	 Θ(1)	 Θ(1)

Stack		       Θ(n)	     Θ(n)	 Θ(1)	 Θ(1)

Queue		       Θ(n)	     Θ(n)	 Θ(1)	 Θ(1)

Stack		       Θ(n)	    Θ(n)	 Θ(1)	 Θ(1)

