Please answer the below Data Structure Questions:

why do we need data structure?
Data structure is a particular way of storing and organizing information in a computer so that it can be retrieved and used most productively.
Different kinds of data structures are meant for different kinds of applications, and some are highly specialized to specific tasks.
Data structures are important for the following reasons:
- Data structures are used in almost every program or software system.
- Specific data structures are essential ingredients of many efficient algorithms, and make possible the management of huge amounts of data, such
  as large integrated collection of databases.
- Some programming languages emphasize data structures, rather than algorithms, as the key organizing factor in software design.

List out the areas in which data structures are applied extensively?
- Compiler Design.
- Operating System.
- Database Management System.
- Statistical analysis package.
- Numerical Analysis.
- Graphics.
- Artificial Intelligence.
- Simulation.

what is an Array?
Arrays are objects, are dynamically created, and may be assigned to variables of type Object. All methods of class Object may be invoked on an array.

what is the difference between the Array and ArrayList?
- An array is basic functionality provided by Java. ArrayList is part of collection framework in Java. Therefore array members are accessed using [],
  while ArrayList has a set of methods to access elements and modify them.
- Array is a fixed size data structure while ArrayList is not. One need not to mention the size of Arraylist while creating its object.
  Even if we specify some initial capacity, we can add more elements.
- Array can contain both primitive data types as well as objects of a class depending on the definition of the array. However,
  ArrayList only supports object entries, not the primitive data types.
- Since ArrayList can’t be created for primitive data types, members of ArrayList are always references to objects at different memory locations.
  Therefore in ArrayList, the actual objects are never stored at contiguous locations. References of the actual objects are stored at contiguous locations.
  In array, it depends whether the arrays is of primitive type or object type. In case of primitive types, actual values are contiguous locations,
  but in case of objects, allocation is similar to ArrayList.

what is LinkedList?
A linked list is a linear data structure where each element is a separate object. Each element of a list is comprising of two items - the data
and a reference to the next node. The last node has a reference to null. The entry point into a linked list is called the head of the list.
It should be noted that head is not a separate node, but the reference to the first node. If the list is empty then the head is a null reference.
A linked list is a dynamic data structure. The number of nodes in a list is not fixed and can grow and shrink on demand. Any application which has
to deal with an unknown number of objects will need to use a linked list.
One disadvantage of a linked list against an array is that it does not allow direct access to the individual elements.

what is queue?
A Queue is a collection for holding elements prior to processing. Besides basic Collection operations, queues provide additional insertion, removal, and
inspection operations. The Queue interface follows :
The Queue interface follows:
public interface Queue<E> extends Collection<E> {
    E element();
    boolean offer(E e);
    E peek();
    E poll();
    E remove();
}

what is stack?
A stack is a container of objects that are inserted and removed according to the last-in first-out (LIFO) principle. In the pushdown stacks only two
operations are allowed: push the item into the stack, and pop the item out of the stack. A stack is a limited access data structure - elements can be a
dded and removed from the stack only at the top. push adds an item to the top of the stack, pop removes the item from the top.
A helpful analogy is to think of a stack of books; you can remove only the top book, also you can add a new book on the top.
A stack is a recursive data structure.

what is FIFO and LIFO?
First-In Firt-Out.
Last-In First-Out.

what is the order of complexity?
Time and space complexity.

what is the best case to search an element from an array?
The best case occurs when the target element happens to be the first item we examinate in the array.

what is the worst case to search an element from an array?
The worst case occurs when the target element is not in the array and we have to examinate every element before we determine that it isn't present.

what is tree in data structure?
A tree is composed of a set of nodes in which elements are stored, and edges that connect one node to another. Each node is a particular level in the
tree hierarchy. The root of the tree is the onlt node at the top level of the tree. There is only onr root node in a tree.

what is graph in data structure?
A graph is a pictorial representation of a set of objects where some pairs of objects are connected by links.
The interconnected objects are represented by points termed as vertices, and the links that connect the vertices are called edges.
Formally, a graph is a pair of sets (V, E), where V is the set of vertices and E is the set of edges, connecting the pairs of vertices.

what is the difference between the HashTable and HashMap?
- HashMap is non synchronized. It is not-thread safe and can't be shared between many threads without proper synchronization code.
- Hashtable is synchronized. It is thread-safe and can be shared with many threads.
- HashMap allows one null key and multiple null values. Hashtable doesn't allow any null key or value.
- HashMap is a new class introduced in JDK 1.2. Hashtable is a legacy class.
- HashMap is fast and HashTable is slow.
- HashMap is traversed by Iterator. Hashtable is traversed by Enumerator and Iterator.
- HashMap inherits AbstractMap class. Hashtable inherits Dictionary class.

What are the major data structures used in the following areas : RDBMS, Network data model and Hierarchical data model.
    - RDBMS = Arrays.
    - Network data model = Graphs.
    - Hierarchical data model = Trees.

How HashMap works in java?
HashMap works on the principle of Hashing.  To understand Hashing, we should understand the three terms first Hash Function, Hash Value and Bucket.
- hashCode() function  which returns an integer value is the Hash function. The important point to note that, this method is present in Object class.
-  Hash value is the int value returned by the hash function.
- A bucket is used to store key value pairs . A bucket can have multiple key-value pairs. In HashMap, bucket used simple linked list to store objects.

What is ArrayIndexOutOfBoundsException in java? When it occurs?
Thrown to indicate that an array has been accessed with an illegal index. It occurs when the index is either negative or greater than or equal to
the size of the array.

What are the different ways of copying an array into another array?
There are two possibilities to copy values from an array to another:
- An own implementation of an copying algorithm.
- Use of API functions.

For the first approach, the copy means to:
- Define a new vector.
- Allocate space for the new array.
- Copy values from the initial array.

What is difference between an array and a linked list?
- In array, elements can be accessed using index/subscript value, i.e. elements can be randomly accessed like arr[0], arr[3], etc. So array provides
  fast and random access. In linked list, elements can’t be accessed randomly but can be accessed only sequentially and accessing element takes 0(n) time.
- In array, elements are stored in consecutive manner in memory. In linked list, elements can be stored at any available place as address of node is
  stored in previous node.
- Insertion & deletion takes more time in array as elements are stored in consecutive memory locations. Insertion & deletion are fast & easy in linked
  list as only value of pointer is needed to change.
- In array, memory is allocated at compile time i.e. Static Memory Allocation. In linked list, memory is allocated at run time i.e. Dynamic Memory
  Allocation.
- Array can be single dimensional, two dimension or multidimensional. Linked list can be singly, doubly or circular linked list.
- In array, each element is independent, no connection with previous element or with its location. In Linked list, location or address of elements
  is stored in the link part of previous element/node.

What is DFS and BFS?
- DFS stands for Depth first search, it's a way of traversing graphs, which is closely related to preorder traversal of a tree. Recall that preorder
  traversal simply visits each node before its children. It is most easy to program as a recursive routine.
- BFS stands for Breadth First Search which is an algorithm for traversing or searching tree or graph data structures. It starts at the tree root
  and explores the neighbor nodes first, before moving to the next level neighbors.

What is Recursion?
Recursion is a process in which a method calls itself continuously. A method in java that calls itself is called recursive method.
It makes the code compact but complex to understand.

What is Big-(O)-notation?
Big O notation is the language we use for articulating how long an algorithm takes to run. It's how we compare the efficiency of different
approaches to a problem.
With big O notation we express the runtime in terms of—brace yourself—how quickly it grows relative to the input, as the input gets arbitrarily large.

Outlined different kind of sorting algorithm with time complexity?
O(n) algorithms:
O(n^2) algorithms: The algorithm works by comparing each item in the list with the item next to it, and swapping them if required. In other words, the
largest element has bubbled to the top of the array. The algorithm repeats this process until it makes a pass all the way through the list without
swapping any items.
O(n log n) algorithms: which is a merge-sort that is based on the divide-and-conquer paradigm. It involves the following three steps:
- Divide the array into two (or more) subarrays.
- Sort each subarray (Conquer).
- Merge them into one.

Draw a table with time complexity in which it will summarize all the data structure feature's advantages and disadvantages.
  a)In terms of Accessing element.
  b)In terms of Inserting element.
  c)In terms of Searching element.
  d)In terms of Removing element.
---------------------------------------------------------------------------------
Data Structure       |   Instering  |   Searching  |   Removing  |  Accessing   |
---------------------------------------------------------------------------------
Array                |     O(n)     |     O(n)     |     O(n)    |    O(1)      |
---------------------------------------------------------------------------------
Linked List          |     O(1)     |     O(n)     |     O(n)    |    O(n)      |
---------------------------------------------------------------------------------
Resizable array list |     O(1)     |     O(n)     |     O(n)    |    O(1)      |
---------------------------------------------------------------------------------
Stack                |     O(1)     |      -       |     O(1)    |      -       |
---------------------------------------------------------------------------------
Queue                |     O(1)     |      -       |     O(1)    |      -       |
---------------------------------------------------------------------------------
HashTable            |     O(1)     |     O(1)     |     O(1)    |      -       |
---------------------------------------------------------------------------------
Tree-based dictionary|   O(log n)   |   O(log n)   |   O(log n)  |      -       |
---------------------------------------------------------------------------------
HashTable based Set  |     O(1)     |     O(1)     |     O(1)    |      -       |
---------------------------------------------------------------------------------
Tree based set       |   O(log n)   |   O(log n)   |   O(log n)  |      -       |
---------------------------------------------------------------------------------